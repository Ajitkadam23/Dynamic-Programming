https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/

##Memoization
        st="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        d={}
        # d["A"]=[0,0]
        for s in range(len(st)):
            j=s%6
            i=s//6
            d[st[s]]=[i,j]
        memo={}
        def dfs(i,j):
            if (i,j) in memo:
                return memo[(i,j)]
            if j==len(word)-1:
                return 0
            first=float("inf")
            second=float("inf")
            if j+1<=len(word)-1:
                first=abs(d[word[j]][0]-d[word[j+1]][0])+abs(d[word[j]][1]-d[word[j+1]][1])+dfs(i,j+1)
                second=abs(d[word[i]][0]-d[word[j+1]][0])+abs(d[word[i]][1]-d[word[j+1]][1])+dfs(j,j+1)
                memo[(i,j)]=min(first,second)
                return min(first,second)
        # cost=abs(d[word[1]][0]-d[word[0]][0])+abs(d[word[1]][1]-d[word[0]][1])
        cost=0
        mini=float("inf")
        for i in range(0,len(word)-1):
            
            x=dfs(i,i+1)
            # print(i,x)
            mini=min(mini,cost+x)
            cost=cost+abs(d[word[i]][0]-d[word[i+1]][0])+abs(d[word[i]][1]-d[word[i+1]][1])
        return mini
